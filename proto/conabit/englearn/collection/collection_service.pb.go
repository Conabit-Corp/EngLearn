// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.15.8
// source: proto/conabit/englearn/collection/collection_service.proto

package collection

import (
	context "context"
	common "github.com/Conabit-Corp/EngLearn/proto/conabit/englearn/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WordCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Words       []*WordPair `protobuf:"bytes,4,rep,name=words,proto3" json:"words,omitempty"`
}

func (x *WordCollection) Reset() {
	*x = WordCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordCollection) ProtoMessage() {}

func (x *WordCollection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordCollection.ProtoReflect.Descriptor instead.
func (*WordCollection) Descriptor() ([]byte, []int) {
	return file_proto_conabit_englearn_collection_collection_service_proto_rawDescGZIP(), []int{0}
}

func (x *WordCollection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WordCollection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WordCollection) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WordCollection) GetWords() []*WordPair {
	if x != nil {
		return x.Words
	}
	return nil
}

type CreateWordCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session        *common.Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	WordCollection *WordCollection `protobuf:"bytes,2,opt,name=word_collection,json=wordCollection,proto3" json:"word_collection,omitempty"`
}

func (x *CreateWordCollectionRequest) Reset() {
	*x = CreateWordCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWordCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWordCollectionRequest) ProtoMessage() {}

func (x *CreateWordCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWordCollectionRequest.ProtoReflect.Descriptor instead.
func (*CreateWordCollectionRequest) Descriptor() ([]byte, []int) {
	return file_proto_conabit_englearn_collection_collection_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateWordCollectionRequest) GetSession() *common.Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CreateWordCollectionRequest) GetWordCollection() *WordCollection {
	if x != nil {
		return x.WordCollection
	}
	return nil
}

type CreateWordCollectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectionId string `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *CreateWordCollectionResponse) Reset() {
	*x = CreateWordCollectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWordCollectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWordCollectionResponse) ProtoMessage() {}

func (x *CreateWordCollectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWordCollectionResponse.ProtoReflect.Descriptor instead.
func (*CreateWordCollectionResponse) Descriptor() ([]byte, []int) {
	return file_proto_conabit_englearn_collection_collection_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateWordCollectionResponse) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

type GetWordCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session        *common.Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	CollectionId   string          `protobuf:"bytes,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	CollectionName string          `protobuf:"bytes,3,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
}

func (x *GetWordCollectionRequest) Reset() {
	*x = GetWordCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWordCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWordCollectionRequest) ProtoMessage() {}

func (x *GetWordCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWordCollectionRequest.ProtoReflect.Descriptor instead.
func (*GetWordCollectionRequest) Descriptor() ([]byte, []int) {
	return file_proto_conabit_englearn_collection_collection_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetWordCollectionRequest) GetSession() *common.Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *GetWordCollectionRequest) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

func (x *GetWordCollectionRequest) GetCollectionName() string {
	if x != nil {
		return x.CollectionName
	}
	return ""
}

type CreateGroupCollectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session        *common.Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	WordCollection *WordCollection `protobuf:"bytes,2,opt,name=WordCollection,proto3" json:"WordCollection,omitempty"`
	GroupId        string          `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *CreateGroupCollectionRequest) Reset() {
	*x = CreateGroupCollectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupCollectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupCollectionRequest) ProtoMessage() {}

func (x *CreateGroupCollectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupCollectionRequest.ProtoReflect.Descriptor instead.
func (*CreateGroupCollectionRequest) Descriptor() ([]byte, []int) {
	return file_proto_conabit_englearn_collection_collection_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateGroupCollectionRequest) GetSession() *common.Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CreateGroupCollectionRequest) GetWordCollection() *WordCollection {
	if x != nil {
		return x.WordCollection
	}
	return nil
}

func (x *CreateGroupCollectionRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type GetGroupCollectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *common.Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	GroupId string          `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *GetGroupCollectionsRequest) Reset() {
	*x = GetGroupCollectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupCollectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupCollectionsRequest) ProtoMessage() {}

func (x *GetGroupCollectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupCollectionsRequest.ProtoReflect.Descriptor instead.
func (*GetGroupCollectionsRequest) Descriptor() ([]byte, []int) {
	return file_proto_conabit_englearn_collection_collection_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetGroupCollectionsRequest) GetSession() *common.Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *GetGroupCollectionsRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type GetGroupCollectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collections []*WordCollection `protobuf:"bytes,1,rep,name=collections,proto3" json:"collections,omitempty"`
}

func (x *GetGroupCollectionsResponse) Reset() {
	*x = GetGroupCollectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupCollectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupCollectionsResponse) ProtoMessage() {}

func (x *GetGroupCollectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupCollectionsResponse.ProtoReflect.Descriptor instead.
func (*GetGroupCollectionsResponse) Descriptor() ([]byte, []int) {
	return file_proto_conabit_englearn_collection_collection_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetGroupCollectionsResponse) GetCollections() []*WordCollection {
	if x != nil {
		return x.Collections
	}
	return nil
}

var File_proto_conabit_englearn_collection_collection_service_proto protoreflect.FileDescriptor

var file_proto_conabit_englearn_collection_collection_service_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2f,
	0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x63, 0x6f,
	0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2f, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x6e, 0x61, 0x62, 0x69, 0x74, 0x2f, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x01, 0x0a,
	0x0e, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65,
	0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e,
	0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54,
	0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69,
	0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69,
	0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xca, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a,
	0x0e, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e,
	0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x73, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63,
	0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x22, 0x6c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74,
	0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x32, 0xd9, 0x05, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e,
	0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e,
	0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74,
	0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e,
	0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69,
	0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x44, 0x5a, 0x42,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6e, 0x61, 0x62,
	0x69, 0x74, 0x2d, 0x43, 0x6f, 0x72, 0x70, 0x2f, 0x45, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2f, 0x65,
	0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_conabit_englearn_collection_collection_service_proto_rawDescOnce sync.Once
	file_proto_conabit_englearn_collection_collection_service_proto_rawDescData = file_proto_conabit_englearn_collection_collection_service_proto_rawDesc
)

func file_proto_conabit_englearn_collection_collection_service_proto_rawDescGZIP() []byte {
	file_proto_conabit_englearn_collection_collection_service_proto_rawDescOnce.Do(func() {
		file_proto_conabit_englearn_collection_collection_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_conabit_englearn_collection_collection_service_proto_rawDescData)
	})
	return file_proto_conabit_englearn_collection_collection_service_proto_rawDescData
}

var file_proto_conabit_englearn_collection_collection_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_conabit_englearn_collection_collection_service_proto_goTypes = []interface{}{
	(*WordCollection)(nil),               // 0: conabit.englearn.collection.WordCollection
	(*CreateWordCollectionRequest)(nil),  // 1: conabit.englearn.collection.CreateWordCollectionRequest
	(*CreateWordCollectionResponse)(nil), // 2: conabit.englearn.collection.CreateWordCollectionResponse
	(*GetWordCollectionRequest)(nil),     // 3: conabit.englearn.collection.GetWordCollectionRequest
	(*CreateGroupCollectionRequest)(nil), // 4: conabit.englearn.collection.CreateGroupCollectionRequest
	(*GetGroupCollectionsRequest)(nil),   // 5: conabit.englearn.collection.GetGroupCollectionsRequest
	(*GetGroupCollectionsResponse)(nil),  // 6: conabit.englearn.collection.GetGroupCollectionsResponse
	(*WordPair)(nil),                     // 7: conabit.englearn.collection.WordPair
	(*common.Session)(nil),               // 8: conabit.englearn.common.Session
}
var file_proto_conabit_englearn_collection_collection_service_proto_depIdxs = []int32{
	7,  // 0: conabit.englearn.collection.WordCollection.words:type_name -> conabit.englearn.collection.WordPair
	8,  // 1: conabit.englearn.collection.CreateWordCollectionRequest.session:type_name -> conabit.englearn.common.Session
	0,  // 2: conabit.englearn.collection.CreateWordCollectionRequest.word_collection:type_name -> conabit.englearn.collection.WordCollection
	8,  // 3: conabit.englearn.collection.GetWordCollectionRequest.session:type_name -> conabit.englearn.common.Session
	8,  // 4: conabit.englearn.collection.CreateGroupCollectionRequest.session:type_name -> conabit.englearn.common.Session
	0,  // 5: conabit.englearn.collection.CreateGroupCollectionRequest.WordCollection:type_name -> conabit.englearn.collection.WordCollection
	8,  // 6: conabit.englearn.collection.GetGroupCollectionsRequest.session:type_name -> conabit.englearn.common.Session
	0,  // 7: conabit.englearn.collection.GetGroupCollectionsResponse.collections:type_name -> conabit.englearn.collection.WordCollection
	1,  // 8: conabit.englearn.collection.WordCollectionService.CreateWordCollection:input_type -> conabit.englearn.collection.CreateWordCollectionRequest
	1,  // 9: conabit.englearn.collection.WordCollectionService.UpdateWordCollection:input_type -> conabit.englearn.collection.CreateWordCollectionRequest
	3,  // 10: conabit.englearn.collection.WordCollectionService.GetWordCollection:input_type -> conabit.englearn.collection.GetWordCollectionRequest
	4,  // 11: conabit.englearn.collection.WordCollectionService.CreateGroupWordCollection:input_type -> conabit.englearn.collection.CreateGroupCollectionRequest
	5,  // 12: conabit.englearn.collection.WordCollectionService.GetGroupWordCollections:input_type -> conabit.englearn.collection.GetGroupCollectionsRequest
	2,  // 13: conabit.englearn.collection.WordCollectionService.CreateWordCollection:output_type -> conabit.englearn.collection.CreateWordCollectionResponse
	2,  // 14: conabit.englearn.collection.WordCollectionService.UpdateWordCollection:output_type -> conabit.englearn.collection.CreateWordCollectionResponse
	0,  // 15: conabit.englearn.collection.WordCollectionService.GetWordCollection:output_type -> conabit.englearn.collection.WordCollection
	2,  // 16: conabit.englearn.collection.WordCollectionService.CreateGroupWordCollection:output_type -> conabit.englearn.collection.CreateWordCollectionResponse
	6,  // 17: conabit.englearn.collection.WordCollectionService.GetGroupWordCollections:output_type -> conabit.englearn.collection.GetGroupCollectionsResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_conabit_englearn_collection_collection_service_proto_init() }
func file_proto_conabit_englearn_collection_collection_service_proto_init() {
	if File_proto_conabit_englearn_collection_collection_service_proto != nil {
		return
	}
	file_proto_conabit_englearn_collection_word_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWordCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWordCollectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWordCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupCollectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupCollectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_conabit_englearn_collection_collection_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupCollectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_conabit_englearn_collection_collection_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_conabit_englearn_collection_collection_service_proto_goTypes,
		DependencyIndexes: file_proto_conabit_englearn_collection_collection_service_proto_depIdxs,
		MessageInfos:      file_proto_conabit_englearn_collection_collection_service_proto_msgTypes,
	}.Build()
	File_proto_conabit_englearn_collection_collection_service_proto = out.File
	file_proto_conabit_englearn_collection_collection_service_proto_rawDesc = nil
	file_proto_conabit_englearn_collection_collection_service_proto_goTypes = nil
	file_proto_conabit_englearn_collection_collection_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WordCollectionServiceClient is the client API for WordCollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WordCollectionServiceClient interface {
	CreateWordCollection(ctx context.Context, in *CreateWordCollectionRequest, opts ...grpc.CallOption) (*CreateWordCollectionResponse, error)
	UpdateWordCollection(ctx context.Context, in *CreateWordCollectionRequest, opts ...grpc.CallOption) (*CreateWordCollectionResponse, error)
	GetWordCollection(ctx context.Context, in *GetWordCollectionRequest, opts ...grpc.CallOption) (*WordCollection, error)
	CreateGroupWordCollection(ctx context.Context, in *CreateGroupCollectionRequest, opts ...grpc.CallOption) (*CreateWordCollectionResponse, error)
	GetGroupWordCollections(ctx context.Context, in *GetGroupCollectionsRequest, opts ...grpc.CallOption) (*GetGroupCollectionsResponse, error)
}

type wordCollectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWordCollectionServiceClient(cc grpc.ClientConnInterface) WordCollectionServiceClient {
	return &wordCollectionServiceClient{cc}
}

func (c *wordCollectionServiceClient) CreateWordCollection(ctx context.Context, in *CreateWordCollectionRequest, opts ...grpc.CallOption) (*CreateWordCollectionResponse, error) {
	out := new(CreateWordCollectionResponse)
	err := c.cc.Invoke(ctx, "/conabit.englearn.collection.WordCollectionService/CreateWordCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordCollectionServiceClient) UpdateWordCollection(ctx context.Context, in *CreateWordCollectionRequest, opts ...grpc.CallOption) (*CreateWordCollectionResponse, error) {
	out := new(CreateWordCollectionResponse)
	err := c.cc.Invoke(ctx, "/conabit.englearn.collection.WordCollectionService/UpdateWordCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordCollectionServiceClient) GetWordCollection(ctx context.Context, in *GetWordCollectionRequest, opts ...grpc.CallOption) (*WordCollection, error) {
	out := new(WordCollection)
	err := c.cc.Invoke(ctx, "/conabit.englearn.collection.WordCollectionService/GetWordCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordCollectionServiceClient) CreateGroupWordCollection(ctx context.Context, in *CreateGroupCollectionRequest, opts ...grpc.CallOption) (*CreateWordCollectionResponse, error) {
	out := new(CreateWordCollectionResponse)
	err := c.cc.Invoke(ctx, "/conabit.englearn.collection.WordCollectionService/CreateGroupWordCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordCollectionServiceClient) GetGroupWordCollections(ctx context.Context, in *GetGroupCollectionsRequest, opts ...grpc.CallOption) (*GetGroupCollectionsResponse, error) {
	out := new(GetGroupCollectionsResponse)
	err := c.cc.Invoke(ctx, "/conabit.englearn.collection.WordCollectionService/GetGroupWordCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordCollectionServiceServer is the server API for WordCollectionService service.
type WordCollectionServiceServer interface {
	CreateWordCollection(context.Context, *CreateWordCollectionRequest) (*CreateWordCollectionResponse, error)
	UpdateWordCollection(context.Context, *CreateWordCollectionRequest) (*CreateWordCollectionResponse, error)
	GetWordCollection(context.Context, *GetWordCollectionRequest) (*WordCollection, error)
	CreateGroupWordCollection(context.Context, *CreateGroupCollectionRequest) (*CreateWordCollectionResponse, error)
	GetGroupWordCollections(context.Context, *GetGroupCollectionsRequest) (*GetGroupCollectionsResponse, error)
}

// UnimplementedWordCollectionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWordCollectionServiceServer struct {
}

func (*UnimplementedWordCollectionServiceServer) CreateWordCollection(context.Context, *CreateWordCollectionRequest) (*CreateWordCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWordCollection not implemented")
}
func (*UnimplementedWordCollectionServiceServer) UpdateWordCollection(context.Context, *CreateWordCollectionRequest) (*CreateWordCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWordCollection not implemented")
}
func (*UnimplementedWordCollectionServiceServer) GetWordCollection(context.Context, *GetWordCollectionRequest) (*WordCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWordCollection not implemented")
}
func (*UnimplementedWordCollectionServiceServer) CreateGroupWordCollection(context.Context, *CreateGroupCollectionRequest) (*CreateWordCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupWordCollection not implemented")
}
func (*UnimplementedWordCollectionServiceServer) GetGroupWordCollections(context.Context, *GetGroupCollectionsRequest) (*GetGroupCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupWordCollections not implemented")
}

func RegisterWordCollectionServiceServer(s *grpc.Server, srv WordCollectionServiceServer) {
	s.RegisterService(&_WordCollectionService_serviceDesc, srv)
}

func _WordCollectionService_CreateWordCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWordCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordCollectionServiceServer).CreateWordCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conabit.englearn.collection.WordCollectionService/CreateWordCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordCollectionServiceServer).CreateWordCollection(ctx, req.(*CreateWordCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordCollectionService_UpdateWordCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWordCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordCollectionServiceServer).UpdateWordCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conabit.englearn.collection.WordCollectionService/UpdateWordCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordCollectionServiceServer).UpdateWordCollection(ctx, req.(*CreateWordCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordCollectionService_GetWordCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWordCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordCollectionServiceServer).GetWordCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conabit.englearn.collection.WordCollectionService/GetWordCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordCollectionServiceServer).GetWordCollection(ctx, req.(*GetWordCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordCollectionService_CreateGroupWordCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordCollectionServiceServer).CreateGroupWordCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conabit.englearn.collection.WordCollectionService/CreateGroupWordCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordCollectionServiceServer).CreateGroupWordCollection(ctx, req.(*CreateGroupCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordCollectionService_GetGroupWordCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordCollectionServiceServer).GetGroupWordCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conabit.englearn.collection.WordCollectionService/GetGroupWordCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordCollectionServiceServer).GetGroupWordCollections(ctx, req.(*GetGroupCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WordCollectionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "conabit.englearn.collection.WordCollectionService",
	HandlerType: (*WordCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWordCollection",
			Handler:    _WordCollectionService_CreateWordCollection_Handler,
		},
		{
			MethodName: "UpdateWordCollection",
			Handler:    _WordCollectionService_UpdateWordCollection_Handler,
		},
		{
			MethodName: "GetWordCollection",
			Handler:    _WordCollectionService_GetWordCollection_Handler,
		},
		{
			MethodName: "CreateGroupWordCollection",
			Handler:    _WordCollectionService_CreateGroupWordCollection_Handler,
		},
		{
			MethodName: "GetGroupWordCollections",
			Handler:    _WordCollectionService_GetGroupWordCollections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/conabit/englearn/collection/collection_service.proto",
}
