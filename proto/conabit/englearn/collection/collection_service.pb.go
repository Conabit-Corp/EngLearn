// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.15.8
// source: proto/conabit/englearn/collection/collection_service.proto

package collection

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_proto_conabit_englearn_collection_collection_service_proto protoreflect.FileDescriptor

var file_proto_conabit_englearn_collection_collection_service_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2f,
	0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x63, 0x6f,
	0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2f, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xb2, 0x0a, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x64,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6e,
	0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65,
	0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x84, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69,
	0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74,
	0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x2e, 0x63, 0x6f, 0x6e, 0x61,
	0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62,
	0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74,
	0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01,
	0x0a, 0x13, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e,
	0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x57, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64,
	0x57, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x18, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69,
	0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x64,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e,
	0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01, 0x0a, 0x16, 0x45, 0x64, 0x69, 0x74, 0x57,
	0x6f, 0x72, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x2e, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x45, 0x64, 0x69, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e,
	0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2e, 0x65, 0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x64, 0x69, 0x74,
	0x57, 0x6f, 0x72, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x44, 0x5a, 0x42,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6e, 0x61, 0x62,
	0x69, 0x74, 0x2d, 0x43, 0x6f, 0x72, 0x70, 0x2f, 0x45, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x61, 0x62, 0x69, 0x74, 0x2f, 0x65,
	0x6e, 0x67, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_proto_conabit_englearn_collection_collection_service_proto_goTypes = []interface{}{
	(*CreateWordCollectionRequest)(nil),      // 0: conabit.englearn.collection.CreateWordCollectionRequest
	(*GetWordCollectionRequest)(nil),         // 1: conabit.englearn.collection.GetWordCollectionRequest
	(*CreateGroupCollectionRequest)(nil),     // 2: conabit.englearn.collection.CreateGroupCollectionRequest
	(*GetUserCollectionsRequest)(nil),        // 3: conabit.englearn.collection.GetUserCollectionsRequest
	(*GetGroupCollectionsRequest)(nil),       // 4: conabit.englearn.collection.GetGroupCollectionsRequest
	(*DeleteWordCollectionRequest)(nil),      // 5: conabit.englearn.collection.DeleteWordCollectionRequest
	(*AddWordToCollectionRequest)(nil),       // 6: conabit.englearn.collection.AddWordToCollectionRequest
	(*RemoveWordFromCollectionRequest)(nil),  // 7: conabit.englearn.collection.RemoveWordFromCollectionRequest
	(*EditWordFromCollectionRequest)(nil),    // 8: conabit.englearn.collection.EditWordFromCollectionRequest
	(*CreateWordCollectionResponse)(nil),     // 9: conabit.englearn.collection.CreateWordCollectionResponse
	(*GetWordCollectionResponse)(nil),        // 10: conabit.englearn.collection.GetWordCollectionResponse
	(*GetUserCollectionsResponse)(nil),       // 11: conabit.englearn.collection.GetUserCollectionsResponse
	(*GetGroupCollectionsResponse)(nil),      // 12: conabit.englearn.collection.GetGroupCollectionsResponse
	(*DeleteWordCollectionResponse)(nil),     // 13: conabit.englearn.collection.DeleteWordCollectionResponse
	(*AddWordToCollectionResponse)(nil),      // 14: conabit.englearn.collection.AddWordToCollectionResponse
	(*RemoveWordFromCollectionResponse)(nil), // 15: conabit.englearn.collection.RemoveWordFromCollectionResponse
	(*EditWordFromCollectionResponse)(nil),   // 16: conabit.englearn.collection.EditWordFromCollectionResponse
}
var file_proto_conabit_englearn_collection_collection_service_proto_depIdxs = []int32{
	0,  // 0: conabit.englearn.collection.WordCollectionService.CreateWordCollection:input_type -> conabit.englearn.collection.CreateWordCollectionRequest
	1,  // 1: conabit.englearn.collection.WordCollectionService.GetWordCollection:input_type -> conabit.englearn.collection.GetWordCollectionRequest
	2,  // 2: conabit.englearn.collection.WordCollectionService.CreateGroupWordCollection:input_type -> conabit.englearn.collection.CreateGroupCollectionRequest
	3,  // 3: conabit.englearn.collection.WordCollectionService.GetUserWordCollections:input_type -> conabit.englearn.collection.GetUserCollectionsRequest
	4,  // 4: conabit.englearn.collection.WordCollectionService.GetGroupWordCollections:input_type -> conabit.englearn.collection.GetGroupCollectionsRequest
	5,  // 5: conabit.englearn.collection.WordCollectionService.DeleteWordCollection:input_type -> conabit.englearn.collection.DeleteWordCollectionRequest
	6,  // 6: conabit.englearn.collection.WordCollectionService.AddWordToCollection:input_type -> conabit.englearn.collection.AddWordToCollectionRequest
	7,  // 7: conabit.englearn.collection.WordCollectionService.RemoveWordFromCollection:input_type -> conabit.englearn.collection.RemoveWordFromCollectionRequest
	8,  // 8: conabit.englearn.collection.WordCollectionService.EditWordFromCollection:input_type -> conabit.englearn.collection.EditWordFromCollectionRequest
	9,  // 9: conabit.englearn.collection.WordCollectionService.CreateWordCollection:output_type -> conabit.englearn.collection.CreateWordCollectionResponse
	10, // 10: conabit.englearn.collection.WordCollectionService.GetWordCollection:output_type -> conabit.englearn.collection.GetWordCollectionResponse
	9,  // 11: conabit.englearn.collection.WordCollectionService.CreateGroupWordCollection:output_type -> conabit.englearn.collection.CreateWordCollectionResponse
	11, // 12: conabit.englearn.collection.WordCollectionService.GetUserWordCollections:output_type -> conabit.englearn.collection.GetUserCollectionsResponse
	12, // 13: conabit.englearn.collection.WordCollectionService.GetGroupWordCollections:output_type -> conabit.englearn.collection.GetGroupCollectionsResponse
	13, // 14: conabit.englearn.collection.WordCollectionService.DeleteWordCollection:output_type -> conabit.englearn.collection.DeleteWordCollectionResponse
	14, // 15: conabit.englearn.collection.WordCollectionService.AddWordToCollection:output_type -> conabit.englearn.collection.AddWordToCollectionResponse
	15, // 16: conabit.englearn.collection.WordCollectionService.RemoveWordFromCollection:output_type -> conabit.englearn.collection.RemoveWordFromCollectionResponse
	16, // 17: conabit.englearn.collection.WordCollectionService.EditWordFromCollection:output_type -> conabit.englearn.collection.EditWordFromCollectionResponse
	9,  // [9:18] is the sub-list for method output_type
	0,  // [0:9] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_proto_conabit_englearn_collection_collection_service_proto_init() }
func file_proto_conabit_englearn_collection_collection_service_proto_init() {
	if File_proto_conabit_englearn_collection_collection_service_proto != nil {
		return
	}
	file_proto_conabit_englearn_collection_collection_transport_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_conabit_englearn_collection_collection_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_conabit_englearn_collection_collection_service_proto_goTypes,
		DependencyIndexes: file_proto_conabit_englearn_collection_collection_service_proto_depIdxs,
	}.Build()
	File_proto_conabit_englearn_collection_collection_service_proto = out.File
	file_proto_conabit_englearn_collection_collection_service_proto_rawDesc = nil
	file_proto_conabit_englearn_collection_collection_service_proto_goTypes = nil
	file_proto_conabit_englearn_collection_collection_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WordCollectionServiceClient is the client API for WordCollectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WordCollectionServiceClient interface {
	CreateWordCollection(ctx context.Context, in *CreateWordCollectionRequest, opts ...grpc.CallOption) (*CreateWordCollectionResponse, error)
	GetWordCollection(ctx context.Context, in *GetWordCollectionRequest, opts ...grpc.CallOption) (*GetWordCollectionResponse, error)
	CreateGroupWordCollection(ctx context.Context, in *CreateGroupCollectionRequest, opts ...grpc.CallOption) (*CreateWordCollectionResponse, error)
	GetUserWordCollections(ctx context.Context, in *GetUserCollectionsRequest, opts ...grpc.CallOption) (*GetUserCollectionsResponse, error)
	GetGroupWordCollections(ctx context.Context, in *GetGroupCollectionsRequest, opts ...grpc.CallOption) (*GetGroupCollectionsResponse, error)
	DeleteWordCollection(ctx context.Context, in *DeleteWordCollectionRequest, opts ...grpc.CallOption) (*DeleteWordCollectionResponse, error)
	AddWordToCollection(ctx context.Context, in *AddWordToCollectionRequest, opts ...grpc.CallOption) (*AddWordToCollectionResponse, error)
	RemoveWordFromCollection(ctx context.Context, in *RemoveWordFromCollectionRequest, opts ...grpc.CallOption) (*RemoveWordFromCollectionResponse, error)
	EditWordFromCollection(ctx context.Context, in *EditWordFromCollectionRequest, opts ...grpc.CallOption) (*EditWordFromCollectionResponse, error)
}

type wordCollectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWordCollectionServiceClient(cc grpc.ClientConnInterface) WordCollectionServiceClient {
	return &wordCollectionServiceClient{cc}
}

func (c *wordCollectionServiceClient) CreateWordCollection(ctx context.Context, in *CreateWordCollectionRequest, opts ...grpc.CallOption) (*CreateWordCollectionResponse, error) {
	out := new(CreateWordCollectionResponse)
	err := c.cc.Invoke(ctx, "/conabit.englearn.collection.WordCollectionService/CreateWordCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordCollectionServiceClient) GetWordCollection(ctx context.Context, in *GetWordCollectionRequest, opts ...grpc.CallOption) (*GetWordCollectionResponse, error) {
	out := new(GetWordCollectionResponse)
	err := c.cc.Invoke(ctx, "/conabit.englearn.collection.WordCollectionService/GetWordCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordCollectionServiceClient) CreateGroupWordCollection(ctx context.Context, in *CreateGroupCollectionRequest, opts ...grpc.CallOption) (*CreateWordCollectionResponse, error) {
	out := new(CreateWordCollectionResponse)
	err := c.cc.Invoke(ctx, "/conabit.englearn.collection.WordCollectionService/CreateGroupWordCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordCollectionServiceClient) GetUserWordCollections(ctx context.Context, in *GetUserCollectionsRequest, opts ...grpc.CallOption) (*GetUserCollectionsResponse, error) {
	out := new(GetUserCollectionsResponse)
	err := c.cc.Invoke(ctx, "/conabit.englearn.collection.WordCollectionService/GetUserWordCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordCollectionServiceClient) GetGroupWordCollections(ctx context.Context, in *GetGroupCollectionsRequest, opts ...grpc.CallOption) (*GetGroupCollectionsResponse, error) {
	out := new(GetGroupCollectionsResponse)
	err := c.cc.Invoke(ctx, "/conabit.englearn.collection.WordCollectionService/GetGroupWordCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordCollectionServiceClient) DeleteWordCollection(ctx context.Context, in *DeleteWordCollectionRequest, opts ...grpc.CallOption) (*DeleteWordCollectionResponse, error) {
	out := new(DeleteWordCollectionResponse)
	err := c.cc.Invoke(ctx, "/conabit.englearn.collection.WordCollectionService/DeleteWordCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordCollectionServiceClient) AddWordToCollection(ctx context.Context, in *AddWordToCollectionRequest, opts ...grpc.CallOption) (*AddWordToCollectionResponse, error) {
	out := new(AddWordToCollectionResponse)
	err := c.cc.Invoke(ctx, "/conabit.englearn.collection.WordCollectionService/AddWordToCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordCollectionServiceClient) RemoveWordFromCollection(ctx context.Context, in *RemoveWordFromCollectionRequest, opts ...grpc.CallOption) (*RemoveWordFromCollectionResponse, error) {
	out := new(RemoveWordFromCollectionResponse)
	err := c.cc.Invoke(ctx, "/conabit.englearn.collection.WordCollectionService/RemoveWordFromCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordCollectionServiceClient) EditWordFromCollection(ctx context.Context, in *EditWordFromCollectionRequest, opts ...grpc.CallOption) (*EditWordFromCollectionResponse, error) {
	out := new(EditWordFromCollectionResponse)
	err := c.cc.Invoke(ctx, "/conabit.englearn.collection.WordCollectionService/EditWordFromCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordCollectionServiceServer is the server API for WordCollectionService service.
type WordCollectionServiceServer interface {
	CreateWordCollection(context.Context, *CreateWordCollectionRequest) (*CreateWordCollectionResponse, error)
	GetWordCollection(context.Context, *GetWordCollectionRequest) (*GetWordCollectionResponse, error)
	CreateGroupWordCollection(context.Context, *CreateGroupCollectionRequest) (*CreateWordCollectionResponse, error)
	GetUserWordCollections(context.Context, *GetUserCollectionsRequest) (*GetUserCollectionsResponse, error)
	GetGroupWordCollections(context.Context, *GetGroupCollectionsRequest) (*GetGroupCollectionsResponse, error)
	DeleteWordCollection(context.Context, *DeleteWordCollectionRequest) (*DeleteWordCollectionResponse, error)
	AddWordToCollection(context.Context, *AddWordToCollectionRequest) (*AddWordToCollectionResponse, error)
	RemoveWordFromCollection(context.Context, *RemoveWordFromCollectionRequest) (*RemoveWordFromCollectionResponse, error)
	EditWordFromCollection(context.Context, *EditWordFromCollectionRequest) (*EditWordFromCollectionResponse, error)
}

// UnimplementedWordCollectionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWordCollectionServiceServer struct {
}

func (*UnimplementedWordCollectionServiceServer) CreateWordCollection(context.Context, *CreateWordCollectionRequest) (*CreateWordCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWordCollection not implemented")
}
func (*UnimplementedWordCollectionServiceServer) GetWordCollection(context.Context, *GetWordCollectionRequest) (*GetWordCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWordCollection not implemented")
}
func (*UnimplementedWordCollectionServiceServer) CreateGroupWordCollection(context.Context, *CreateGroupCollectionRequest) (*CreateWordCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupWordCollection not implemented")
}
func (*UnimplementedWordCollectionServiceServer) GetUserWordCollections(context.Context, *GetUserCollectionsRequest) (*GetUserCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWordCollections not implemented")
}
func (*UnimplementedWordCollectionServiceServer) GetGroupWordCollections(context.Context, *GetGroupCollectionsRequest) (*GetGroupCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupWordCollections not implemented")
}
func (*UnimplementedWordCollectionServiceServer) DeleteWordCollection(context.Context, *DeleteWordCollectionRequest) (*DeleteWordCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWordCollection not implemented")
}
func (*UnimplementedWordCollectionServiceServer) AddWordToCollection(context.Context, *AddWordToCollectionRequest) (*AddWordToCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWordToCollection not implemented")
}
func (*UnimplementedWordCollectionServiceServer) RemoveWordFromCollection(context.Context, *RemoveWordFromCollectionRequest) (*RemoveWordFromCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWordFromCollection not implemented")
}
func (*UnimplementedWordCollectionServiceServer) EditWordFromCollection(context.Context, *EditWordFromCollectionRequest) (*EditWordFromCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditWordFromCollection not implemented")
}

func RegisterWordCollectionServiceServer(s *grpc.Server, srv WordCollectionServiceServer) {
	s.RegisterService(&_WordCollectionService_serviceDesc, srv)
}

func _WordCollectionService_CreateWordCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWordCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordCollectionServiceServer).CreateWordCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conabit.englearn.collection.WordCollectionService/CreateWordCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordCollectionServiceServer).CreateWordCollection(ctx, req.(*CreateWordCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordCollectionService_GetWordCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWordCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordCollectionServiceServer).GetWordCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conabit.englearn.collection.WordCollectionService/GetWordCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordCollectionServiceServer).GetWordCollection(ctx, req.(*GetWordCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordCollectionService_CreateGroupWordCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordCollectionServiceServer).CreateGroupWordCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conabit.englearn.collection.WordCollectionService/CreateGroupWordCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordCollectionServiceServer).CreateGroupWordCollection(ctx, req.(*CreateGroupCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordCollectionService_GetUserWordCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordCollectionServiceServer).GetUserWordCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conabit.englearn.collection.WordCollectionService/GetUserWordCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordCollectionServiceServer).GetUserWordCollections(ctx, req.(*GetUserCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordCollectionService_GetGroupWordCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordCollectionServiceServer).GetGroupWordCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conabit.englearn.collection.WordCollectionService/GetGroupWordCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordCollectionServiceServer).GetGroupWordCollections(ctx, req.(*GetGroupCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordCollectionService_DeleteWordCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWordCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordCollectionServiceServer).DeleteWordCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conabit.englearn.collection.WordCollectionService/DeleteWordCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordCollectionServiceServer).DeleteWordCollection(ctx, req.(*DeleteWordCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordCollectionService_AddWordToCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWordToCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordCollectionServiceServer).AddWordToCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conabit.englearn.collection.WordCollectionService/AddWordToCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordCollectionServiceServer).AddWordToCollection(ctx, req.(*AddWordToCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordCollectionService_RemoveWordFromCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWordFromCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordCollectionServiceServer).RemoveWordFromCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conabit.englearn.collection.WordCollectionService/RemoveWordFromCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordCollectionServiceServer).RemoveWordFromCollection(ctx, req.(*RemoveWordFromCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordCollectionService_EditWordFromCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditWordFromCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordCollectionServiceServer).EditWordFromCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conabit.englearn.collection.WordCollectionService/EditWordFromCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordCollectionServiceServer).EditWordFromCollection(ctx, req.(*EditWordFromCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WordCollectionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "conabit.englearn.collection.WordCollectionService",
	HandlerType: (*WordCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWordCollection",
			Handler:    _WordCollectionService_CreateWordCollection_Handler,
		},
		{
			MethodName: "GetWordCollection",
			Handler:    _WordCollectionService_GetWordCollection_Handler,
		},
		{
			MethodName: "CreateGroupWordCollection",
			Handler:    _WordCollectionService_CreateGroupWordCollection_Handler,
		},
		{
			MethodName: "GetUserWordCollections",
			Handler:    _WordCollectionService_GetUserWordCollections_Handler,
		},
		{
			MethodName: "GetGroupWordCollections",
			Handler:    _WordCollectionService_GetGroupWordCollections_Handler,
		},
		{
			MethodName: "DeleteWordCollection",
			Handler:    _WordCollectionService_DeleteWordCollection_Handler,
		},
		{
			MethodName: "AddWordToCollection",
			Handler:    _WordCollectionService_AddWordToCollection_Handler,
		},
		{
			MethodName: "RemoveWordFromCollection",
			Handler:    _WordCollectionService_RemoveWordFromCollection_Handler,
		},
		{
			MethodName: "EditWordFromCollection",
			Handler:    _WordCollectionService_EditWordFromCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/conabit/englearn/collection/collection_service.proto",
}
